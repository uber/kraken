// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/origin/blobclient (interfaces: ClientResolver)

// Package mockblobclient is a generated GoMock package.
package mockblobclient

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/uber/kraken/core"
	blobclient "github.com/uber/kraken/origin/blobclient"
	reflect "reflect"
)

// MockClientResolver is a mock of ClientResolver interface
type MockClientResolver struct {
	ctrl     *gomock.Controller
	recorder *MockClientResolverMockRecorder
}

// MockClientResolverMockRecorder is the mock recorder for MockClientResolver
type MockClientResolverMockRecorder struct {
	mock *MockClientResolver
}

// NewMockClientResolver creates a new mock instance
func NewMockClientResolver(ctrl *gomock.Controller) *MockClientResolver {
	mock := &MockClientResolver{ctrl: ctrl}
	mock.recorder = &MockClientResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientResolver) EXPECT() *MockClientResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *MockClientResolver) Resolve(arg0 core.Digest) ([]blobclient.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0)
	ret0, _ := ret[0].([]blobclient.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockClientResolverMockRecorder) Resolve(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockClientResolver)(nil).Resolve), arg0)
}
