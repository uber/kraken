// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/origin/blobclient (interfaces: ClusterClient)
//
// Generated by this command:
//
//	mockgen -package mockblobclient . ClusterClient
//

// Package mockblobclient is a generated GoMock package.
package mockblobclient

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/uber/kraken/core"
	io "io"
	reflect "reflect"
)

// MockClusterClient is a mock of ClusterClient interface.
type MockClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterClientMockRecorder
	isgomock struct{}
}

// MockClusterClientMockRecorder is the mock recorder for MockClusterClient.
type MockClusterClientMockRecorder struct {
	mock *MockClusterClient
}

// NewMockClusterClient creates a new mock instance.
func NewMockClusterClient(ctrl *gomock.Controller) *MockClusterClient {
	mock := &MockClusterClient{ctrl: ctrl}
	mock.recorder = &MockClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterClient) EXPECT() *MockClusterClientMockRecorder {
	return m.recorder
}

// CheckReadiness mocks base method.
func (m *MockClusterClient) CheckReadiness() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReadiness")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckReadiness indicates an expected call of CheckReadiness.
func (mr *MockClusterClientMockRecorder) CheckReadiness() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReadiness", reflect.TypeOf((*MockClusterClient)(nil).CheckReadiness))
}

// DownloadBlob mocks base method.
func (m *MockClusterClient) DownloadBlob(namespace string, d core.Digest, dst io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBlob", namespace, d, dst)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadBlob indicates an expected call of DownloadBlob.
func (mr *MockClusterClientMockRecorder) DownloadBlob(namespace, d, dst interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBlob", reflect.TypeOf((*MockClusterClient)(nil).DownloadBlob), namespace, d, dst)
}

// GetMetaInfo mocks base method.
func (m *MockClusterClient) GetMetaInfo(namespace string, d core.Digest) (*core.MetaInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaInfo", namespace, d)
	ret0, _ := ret[0].(*core.MetaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaInfo indicates an expected call of GetMetaInfo.
func (mr *MockClusterClientMockRecorder) GetMetaInfo(namespace, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaInfo", reflect.TypeOf((*MockClusterClient)(nil).GetMetaInfo), namespace, d)
}

// OverwriteMetaInfo mocks base method.
func (m *MockClusterClient) OverwriteMetaInfo(d core.Digest, pieceLength int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OverwriteMetaInfo", d, pieceLength)
	ret0, _ := ret[0].(error)
	return ret0
}

// OverwriteMetaInfo indicates an expected call of OverwriteMetaInfo.
func (mr *MockClusterClientMockRecorder) OverwriteMetaInfo(d, pieceLength interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverwriteMetaInfo", reflect.TypeOf((*MockClusterClient)(nil).OverwriteMetaInfo), d, pieceLength)
}

// Owners mocks base method.
func (m *MockClusterClient) Owners(d core.Digest) ([]core.PeerContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owners", d)
	ret0, _ := ret[0].([]core.PeerContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Owners indicates an expected call of Owners.
func (mr *MockClusterClientMockRecorder) Owners(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owners", reflect.TypeOf((*MockClusterClient)(nil).Owners), d)
}

// ReplicateToRemote mocks base method.
func (m *MockClusterClient) ReplicateToRemote(namespace string, d core.Digest, remoteDNS string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicateToRemote", namespace, d, remoteDNS)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplicateToRemote indicates an expected call of ReplicateToRemote.
func (mr *MockClusterClientMockRecorder) ReplicateToRemote(namespace, d, remoteDNS interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicateToRemote", reflect.TypeOf((*MockClusterClient)(nil).ReplicateToRemote), namespace, d, remoteDNS)
}

// Stat mocks base method.
func (m *MockClusterClient) Stat(namespace string, d core.Digest) (*core.BlobInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", namespace, d)
	ret0, _ := ret[0].(*core.BlobInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockClusterClientMockRecorder) Stat(namespace, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockClusterClient)(nil).Stat), namespace, d)
}

// UploadBlob mocks base method.
func (m *MockClusterClient) UploadBlob(namespace string, d core.Digest, blob io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBlob", namespace, d, blob)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBlob indicates an expected call of UploadBlob.
func (mr *MockClusterClientMockRecorder) UploadBlob(namespace, d, blob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBlob", reflect.TypeOf((*MockClusterClient)(nil).UploadBlob), namespace, d, blob)
}
