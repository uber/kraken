// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/origin/blobclient (interfaces: Client,Provider,ClusterResolver)

// Package mockblobclient is a generated GoMock package.
package mockblobclient

import (
	image "code.uber.internal/infra/kraken/lib/dockerregistry/image"
	peercontext "code.uber.internal/infra/kraken/lib/peercontext"
	blobclient "code.uber.internal/infra/kraken/origin/blobclient"
	torlib "code.uber.internal/infra/kraken/torlib"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Addr mocks base method
func (m *MockClient) Addr() string {
	ret := m.ctrl.Call(m, "Addr")
	ret0, _ := ret[0].(string)
	return ret0
}

// Addr indicates an expected call of Addr
func (mr *MockClientMockRecorder) Addr() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addr", reflect.TypeOf((*MockClient)(nil).Addr))
}

// CheckBlob mocks base method
func (m *MockClient) CheckBlob(arg0 image.Digest) (bool, error) {
	ret := m.ctrl.Call(m, "CheckBlob", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBlob indicates an expected call of CheckBlob
func (mr *MockClientMockRecorder) CheckBlob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBlob", reflect.TypeOf((*MockClient)(nil).CheckBlob), arg0)
}

// CommitUpload mocks base method
func (m *MockClient) CommitUpload(arg0 image.Digest, arg1 string) error {
	ret := m.ctrl.Call(m, "CommitUpload", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitUpload indicates an expected call of CommitUpload
func (mr *MockClientMockRecorder) CommitUpload(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitUpload", reflect.TypeOf((*MockClient)(nil).CommitUpload), arg0, arg1)
}

// DeleteBlob mocks base method
func (m *MockClient) DeleteBlob(arg0 image.Digest) error {
	ret := m.ctrl.Call(m, "DeleteBlob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlob indicates an expected call of DeleteBlob
func (mr *MockClientMockRecorder) DeleteBlob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlob", reflect.TypeOf((*MockClient)(nil).DeleteBlob), arg0)
}

// GetBlob mocks base method
func (m *MockClient) GetBlob(arg0 image.Digest) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "GetBlob", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlob indicates an expected call of GetBlob
func (mr *MockClientMockRecorder) GetBlob(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockClient)(nil).GetBlob), arg0)
}

// GetMetaInfo mocks base method
func (m *MockClient) GetMetaInfo(arg0 string, arg1 image.Digest) (*torlib.MetaInfo, error) {
	ret := m.ctrl.Call(m, "GetMetaInfo", arg0, arg1)
	ret0, _ := ret[0].(*torlib.MetaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaInfo indicates an expected call of GetMetaInfo
func (mr *MockClientMockRecorder) GetMetaInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaInfo", reflect.TypeOf((*MockClient)(nil).GetMetaInfo), arg0, arg1)
}

// GetPeerContext mocks base method
func (m *MockClient) GetPeerContext() (peercontext.PeerContext, error) {
	ret := m.ctrl.Call(m, "GetPeerContext")
	ret0, _ := ret[0].(peercontext.PeerContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerContext indicates an expected call of GetPeerContext
func (mr *MockClientMockRecorder) GetPeerContext() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerContext", reflect.TypeOf((*MockClient)(nil).GetPeerContext))
}

// Locations mocks base method
func (m *MockClient) Locations(arg0 image.Digest) ([]string, error) {
	ret := m.ctrl.Call(m, "Locations", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Locations indicates an expected call of Locations
func (mr *MockClientMockRecorder) Locations(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locations", reflect.TypeOf((*MockClient)(nil).Locations), arg0)
}

// PatchUpload mocks base method
func (m *MockClient) PatchUpload(arg0 image.Digest, arg1 string, arg2, arg3 int64, arg4 io.Reader) error {
	ret := m.ctrl.Call(m, "PatchUpload", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchUpload indicates an expected call of PatchUpload
func (mr *MockClientMockRecorder) PatchUpload(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUpload", reflect.TypeOf((*MockClient)(nil).PatchUpload), arg0, arg1, arg2, arg3, arg4)
}

// PushBlob mocks base method
func (m *MockClient) PushBlob(arg0 image.Digest, arg1 io.Reader, arg2 int64) error {
	ret := m.ctrl.Call(m, "PushBlob", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushBlob indicates an expected call of PushBlob
func (mr *MockClientMockRecorder) PushBlob(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushBlob", reflect.TypeOf((*MockClient)(nil).PushBlob), arg0, arg1, arg2)
}

// Repair mocks base method
func (m *MockClient) Repair() (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "Repair")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Repair indicates an expected call of Repair
func (mr *MockClientMockRecorder) Repair() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repair", reflect.TypeOf((*MockClient)(nil).Repair))
}

// RepairDigest mocks base method
func (m *MockClient) RepairDigest(arg0 image.Digest) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "RepairDigest", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepairDigest indicates an expected call of RepairDigest
func (mr *MockClientMockRecorder) RepairDigest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepairDigest", reflect.TypeOf((*MockClient)(nil).RepairDigest), arg0)
}

// RepairShard mocks base method
func (m *MockClient) RepairShard(arg0 string) (io.ReadCloser, error) {
	ret := m.ctrl.Call(m, "RepairShard", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepairShard indicates an expected call of RepairShard
func (mr *MockClientMockRecorder) RepairShard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepairShard", reflect.TypeOf((*MockClient)(nil).RepairShard), arg0)
}

// StartUpload mocks base method
func (m *MockClient) StartUpload(arg0 image.Digest) (string, error) {
	ret := m.ctrl.Call(m, "StartUpload", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartUpload indicates an expected call of StartUpload
func (mr *MockClientMockRecorder) StartUpload(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUpload", reflect.TypeOf((*MockClient)(nil).StartUpload), arg0)
}

// UploadBlob mocks base method
func (m *MockClient) UploadBlob(arg0 string, arg1 image.Digest, arg2 io.Reader) error {
	ret := m.ctrl.Call(m, "UploadBlob", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBlob indicates an expected call of UploadBlob
func (mr *MockClientMockRecorder) UploadBlob(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBlob", reflect.TypeOf((*MockClient)(nil).UploadBlob), arg0, arg1, arg2)
}

// UploadBlobThrough mocks base method
func (m *MockClient) UploadBlobThrough(arg0 string, arg1 image.Digest, arg2 io.Reader) error {
	ret := m.ctrl.Call(m, "UploadBlobThrough", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadBlobThrough indicates an expected call of UploadBlobThrough
func (mr *MockClientMockRecorder) UploadBlobThrough(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBlobThrough", reflect.TypeOf((*MockClient)(nil).UploadBlobThrough), arg0, arg1, arg2)
}

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Provide mocks base method
func (m *MockProvider) Provide(arg0 string) blobclient.Client {
	ret := m.ctrl.Call(m, "Provide", arg0)
	ret0, _ := ret[0].(blobclient.Client)
	return ret0
}

// Provide indicates an expected call of Provide
func (mr *MockProviderMockRecorder) Provide(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provide", reflect.TypeOf((*MockProvider)(nil).Provide), arg0)
}

// MockClusterResolver is a mock of ClusterResolver interface
type MockClusterResolver struct {
	ctrl     *gomock.Controller
	recorder *MockClusterResolverMockRecorder
}

// MockClusterResolverMockRecorder is the mock recorder for MockClusterResolver
type MockClusterResolverMockRecorder struct {
	mock *MockClusterResolver
}

// NewMockClusterResolver creates a new mock instance
func NewMockClusterResolver(ctrl *gomock.Controller) *MockClusterResolver {
	mock := &MockClusterResolver{ctrl: ctrl}
	mock.recorder = &MockClusterResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterResolver) EXPECT() *MockClusterResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *MockClusterResolver) Resolve(arg0 image.Digest) ([]blobclient.Client, error) {
	ret := m.ctrl.Call(m, "Resolve", arg0)
	ret0, _ := ret[0].([]blobclient.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockClusterResolverMockRecorder) Resolve(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockClusterResolver)(nil).Resolve), arg0)
}
