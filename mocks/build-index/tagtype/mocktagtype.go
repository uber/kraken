// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/build-index/tagtype (interfaces: Manager,DependencyResolver)

// Package mocktagtype is a generated GoMock package.
package mocktagtype

import (
	tagtype "code.uber.internal/infra/kraken/build-index/tagtype"
	core "code.uber.internal/infra/kraken/core"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetDependencyResolver mocks base method
func (m *MockManager) GetDependencyResolver(arg0 string) (tagtype.DependencyResolver, error) {
	ret := m.ctrl.Call(m, "GetDependencyResolver", arg0)
	ret0, _ := ret[0].(tagtype.DependencyResolver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDependencyResolver indicates an expected call of GetDependencyResolver
func (mr *MockManagerMockRecorder) GetDependencyResolver(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDependencyResolver", reflect.TypeOf((*MockManager)(nil).GetDependencyResolver), arg0)
}

// MockDependencyResolver is a mock of DependencyResolver interface
type MockDependencyResolver struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyResolverMockRecorder
}

// MockDependencyResolverMockRecorder is the mock recorder for MockDependencyResolver
type MockDependencyResolverMockRecorder struct {
	mock *MockDependencyResolver
}

// NewMockDependencyResolver creates a new mock instance
func NewMockDependencyResolver(ctrl *gomock.Controller) *MockDependencyResolver {
	mock := &MockDependencyResolver{ctrl: ctrl}
	mock.recorder = &MockDependencyResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDependencyResolver) EXPECT() *MockDependencyResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *MockDependencyResolver) Resolve(arg0 string, arg1 core.Digest) (core.DigestList, error) {
	ret := m.ctrl.Call(m, "Resolve", arg0, arg1)
	ret0, _ := ret[0].(core.DigestList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve
func (mr *MockDependencyResolverMockRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockDependencyResolver)(nil).Resolve), arg0, arg1)
}
