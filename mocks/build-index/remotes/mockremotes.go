// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/build-index/remotes (interfaces: Replicator)

// Package mockremotes is a generated GoMock package.
package mockremotes

import (
	core "code.uber.internal/infra/kraken/core"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockReplicator is a mock of Replicator interface
type MockReplicator struct {
	ctrl     *gomock.Controller
	recorder *MockReplicatorMockRecorder
}

// MockReplicatorMockRecorder is the mock recorder for MockReplicator
type MockReplicatorMockRecorder struct {
	mock *MockReplicator
}

// NewMockReplicator creates a new mock instance
func NewMockReplicator(ctrl *gomock.Controller) *MockReplicator {
	mock := &MockReplicator{ctrl: ctrl}
	mock.recorder = &MockReplicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReplicator) EXPECT() *MockReplicatorMockRecorder {
	return m.recorder
}

// Replicate mocks base method
func (m *MockReplicator) Replicate(arg0 string, arg1 core.Digest, arg2 []core.Digest) error {
	ret := m.ctrl.Call(m, "Replicate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replicate indicates an expected call of Replicate
func (mr *MockReplicatorMockRecorder) Replicate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicate", reflect.TypeOf((*MockReplicator)(nil).Replicate), arg0, arg1, arg2)
}
