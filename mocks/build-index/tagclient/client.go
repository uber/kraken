// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/build-index/tagclient (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package mocktagclient . Client
//

// Package mocktagclient is a generated GoMock package.
package mocktagclient

import (
	reflect "reflect"
	time "time"

	tagclient "github.com/uber/kraken/build-index/tagclient"
	tagmodels "github.com/uber/kraken/build-index/tagmodels"
	core "github.com/uber/kraken/core"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckReadiness mocks base method.
func (m *MockClient) CheckReadiness() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReadiness")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckReadiness indicates an expected call of CheckReadiness.
func (mr *MockClientMockRecorder) CheckReadiness() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReadiness", reflect.TypeOf((*MockClient)(nil).CheckReadiness))
}

// DuplicatePut mocks base method.
func (m *MockClient) DuplicatePut(tag string, d core.Digest, delay time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicatePut", tag, d, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// DuplicatePut indicates an expected call of DuplicatePut.
func (mr *MockClientMockRecorder) DuplicatePut(tag, d, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicatePut", reflect.TypeOf((*MockClient)(nil).DuplicatePut), tag, d, delay)
}

// DuplicateReplicate mocks base method.
func (m *MockClient) DuplicateReplicate(tag string, d core.Digest, dependencies core.DigestList, delay time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DuplicateReplicate", tag, d, dependencies, delay)
	ret0, _ := ret[0].(error)
	return ret0
}

// DuplicateReplicate indicates an expected call of DuplicateReplicate.
func (mr *MockClientMockRecorder) DuplicateReplicate(tag, d, dependencies, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DuplicateReplicate", reflect.TypeOf((*MockClient)(nil).DuplicateReplicate), tag, d, dependencies, delay)
}

// Get mocks base method.
func (m *MockClient) Get(tag string) (core.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", tag)
	ret0, _ := ret[0].(core.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientMockRecorder) Get(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), tag)
}

// Has mocks base method.
func (m *MockClient) Has(tag string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", tag)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockClientMockRecorder) Has(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockClient)(nil).Has), tag)
}

// List mocks base method.
func (m *MockClient) List(prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClientMockRecorder) List(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClient)(nil).List), prefix)
}

// ListRepository mocks base method.
func (m *MockClient) ListRepository(repo string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepository", repo)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepository indicates an expected call of ListRepository.
func (mr *MockClientMockRecorder) ListRepository(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepository", reflect.TypeOf((*MockClient)(nil).ListRepository), repo)
}

// ListRepositoryWithPagination mocks base method.
func (m *MockClient) ListRepositoryWithPagination(repo string, filter tagclient.ListFilter) (tagmodels.ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryWithPagination", repo, filter)
	ret0, _ := ret[0].(tagmodels.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryWithPagination indicates an expected call of ListRepositoryWithPagination.
func (mr *MockClientMockRecorder) ListRepositoryWithPagination(repo, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryWithPagination", reflect.TypeOf((*MockClient)(nil).ListRepositoryWithPagination), repo, filter)
}

// ListWithPagination mocks base method.
func (m *MockClient) ListWithPagination(prefix string, filter tagclient.ListFilter) (tagmodels.ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWithPagination", prefix, filter)
	ret0, _ := ret[0].(tagmodels.ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithPagination indicates an expected call of ListWithPagination.
func (mr *MockClientMockRecorder) ListWithPagination(prefix, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithPagination", reflect.TypeOf((*MockClient)(nil).ListWithPagination), prefix, filter)
}

// Origin mocks base method.
func (m *MockClient) Origin() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Origin")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Origin indicates an expected call of Origin.
func (mr *MockClientMockRecorder) Origin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Origin", reflect.TypeOf((*MockClient)(nil).Origin))
}

// Put mocks base method.
func (m *MockClient) Put(tag string, d core.Digest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", tag, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockClientMockRecorder) Put(tag, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClient)(nil).Put), tag, d)
}

// PutAndReplicate mocks base method.
func (m *MockClient) PutAndReplicate(tag string, d core.Digest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAndReplicate", tag, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutAndReplicate indicates an expected call of PutAndReplicate.
func (mr *MockClientMockRecorder) PutAndReplicate(tag, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAndReplicate", reflect.TypeOf((*MockClient)(nil).PutAndReplicate), tag, d)
}

// Replicate mocks base method.
func (m *MockClient) Replicate(tag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replicate", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replicate indicates an expected call of Replicate.
func (mr *MockClientMockRecorder) Replicate(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replicate", reflect.TypeOf((*MockClient)(nil).Replicate), tag)
}
