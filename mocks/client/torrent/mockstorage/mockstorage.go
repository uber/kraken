// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/client/torrent/storage (interfaces: Torrent)

// Package mockstorage is a generated GoMock package.
package mockstorage

import (
	storage "code.uber.internal/infra/kraken/client/torrent/storage"
	torlib "code.uber.internal/infra/kraken/torlib"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTorrent is a mock of Torrent interface
type MockTorrent struct {
	ctrl     *gomock.Controller
	recorder *MockTorrentMockRecorder
}

// MockTorrentMockRecorder is the mock recorder for MockTorrent
type MockTorrentMockRecorder struct {
	mock *MockTorrent
}

// NewMockTorrent creates a new mock instance
func NewMockTorrent(ctrl *gomock.Controller) *MockTorrent {
	mock := &MockTorrent{ctrl: ctrl}
	mock.recorder = &MockTorrentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTorrent) EXPECT() *MockTorrentMockRecorder {
	return m.recorder
}

// Bitfield mocks base method
func (m *MockTorrent) Bitfield() storage.Bitfield {
	ret := m.ctrl.Call(m, "Bitfield")
	ret0, _ := ret[0].(storage.Bitfield)
	return ret0
}

// Bitfield indicates an expected call of Bitfield
func (mr *MockTorrentMockRecorder) Bitfield() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bitfield", reflect.TypeOf((*MockTorrent)(nil).Bitfield))
}

// BytesDownloaded mocks base method
func (m *MockTorrent) BytesDownloaded() int64 {
	ret := m.ctrl.Call(m, "BytesDownloaded")
	ret0, _ := ret[0].(int64)
	return ret0
}

// BytesDownloaded indicates an expected call of BytesDownloaded
func (mr *MockTorrentMockRecorder) BytesDownloaded() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BytesDownloaded", reflect.TypeOf((*MockTorrent)(nil).BytesDownloaded))
}

// Complete mocks base method
func (m *MockTorrent) Complete() bool {
	ret := m.ctrl.Call(m, "Complete")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Complete indicates an expected call of Complete
func (mr *MockTorrentMockRecorder) Complete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockTorrent)(nil).Complete))
}

// HasPiece mocks base method
func (m *MockTorrent) HasPiece(arg0 int) bool {
	ret := m.ctrl.Call(m, "HasPiece", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPiece indicates an expected call of HasPiece
func (mr *MockTorrentMockRecorder) HasPiece(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPiece", reflect.TypeOf((*MockTorrent)(nil).HasPiece), arg0)
}

// InfoHash mocks base method
func (m *MockTorrent) InfoHash() torlib.InfoHash {
	ret := m.ctrl.Call(m, "InfoHash")
	ret0, _ := ret[0].(torlib.InfoHash)
	return ret0
}

// InfoHash indicates an expected call of InfoHash
func (mr *MockTorrentMockRecorder) InfoHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoHash", reflect.TypeOf((*MockTorrent)(nil).InfoHash))
}

// Length mocks base method
func (m *MockTorrent) Length() int64 {
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockTorrentMockRecorder) Length() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockTorrent)(nil).Length))
}

// MaxPieceLength mocks base method
func (m *MockTorrent) MaxPieceLength() int64 {
	ret := m.ctrl.Call(m, "MaxPieceLength")
	ret0, _ := ret[0].(int64)
	return ret0
}

// MaxPieceLength indicates an expected call of MaxPieceLength
func (mr *MockTorrentMockRecorder) MaxPieceLength() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxPieceLength", reflect.TypeOf((*MockTorrent)(nil).MaxPieceLength))
}

// MissingPieces mocks base method
func (m *MockTorrent) MissingPieces() []int {
	ret := m.ctrl.Call(m, "MissingPieces")
	ret0, _ := ret[0].([]int)
	return ret0
}

// MissingPieces indicates an expected call of MissingPieces
func (mr *MockTorrentMockRecorder) MissingPieces() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MissingPieces", reflect.TypeOf((*MockTorrent)(nil).MissingPieces))
}

// Name mocks base method
func (m *MockTorrent) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockTorrentMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTorrent)(nil).Name))
}

// NumPieces mocks base method
func (m *MockTorrent) NumPieces() int {
	ret := m.ctrl.Call(m, "NumPieces")
	ret0, _ := ret[0].(int)
	return ret0
}

// NumPieces indicates an expected call of NumPieces
func (mr *MockTorrentMockRecorder) NumPieces() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumPieces", reflect.TypeOf((*MockTorrent)(nil).NumPieces))
}

// PieceLength mocks base method
func (m *MockTorrent) PieceLength(arg0 int) int64 {
	ret := m.ctrl.Call(m, "PieceLength", arg0)
	ret0, _ := ret[0].(int64)
	return ret0
}

// PieceLength indicates an expected call of PieceLength
func (mr *MockTorrentMockRecorder) PieceLength(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PieceLength", reflect.TypeOf((*MockTorrent)(nil).PieceLength), arg0)
}

// ReadPiece mocks base method
func (m *MockTorrent) ReadPiece(arg0 int) ([]byte, error) {
	ret := m.ctrl.Call(m, "ReadPiece", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPiece indicates an expected call of ReadPiece
func (mr *MockTorrentMockRecorder) ReadPiece(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPiece", reflect.TypeOf((*MockTorrent)(nil).ReadPiece), arg0)
}

// String mocks base method
func (m *MockTorrent) String() string {
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockTorrentMockRecorder) String() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockTorrent)(nil).String))
}

// WritePiece mocks base method
func (m *MockTorrent) WritePiece(arg0 []byte, arg1 int) (int, error) {
	ret := m.ctrl.Call(m, "WritePiece", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WritePiece indicates an expected call of WritePiece
func (mr *MockTorrentMockRecorder) WritePiece(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePiece", reflect.TypeOf((*MockTorrent)(nil).WritePiece), arg0, arg1)
}
