// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/lib/hostlist (interfaces: List)

// Package mockhostlist is a generated GoMock package.
package mockhostlist

import (
	stringset "code.uber.internal/infra/kraken/utils/stringset"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockList is a mock of List interface
type MockList struct {
	ctrl     *gomock.Controller
	recorder *MockListMockRecorder
}

// MockListMockRecorder is the mock recorder for MockList
type MockListMockRecorder struct {
	mock *MockList
}

// NewMockList creates a new mock instance
func NewMockList(ctrl *gomock.Controller) *MockList {
	mock := &MockList{ctrl: ctrl}
	mock.recorder = &MockListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockList) EXPECT() *MockListMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *MockList) Resolve() stringset.Set {
	ret := m.ctrl.Call(m, "Resolve")
	ret0, _ := ret[0].(stringset.Set)
	return ret0
}

// Resolve indicates an expected call of Resolve
func (mr *MockListMockRecorder) Resolve() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockList)(nil).Resolve))
}
