// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/backend/hdfsbackend/webhdfs (interfaces: Client)

// Package mockwebhdfs is a generated GoMock package.
package mockwebhdfs

import (
	gomock "github.com/golang/mock/gomock"
	webhdfs "github.com/uber/kraken/lib/backend/hdfsbackend/webhdfs"
	io "io"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockClient) Create(arg0 string, arg1 io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockClientMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClient)(nil).Create), arg0, arg1)
}

// GetFileStatus mocks base method
func (m *MockClient) GetFileStatus(arg0 string) (webhdfs.FileStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileStatus", arg0)
	ret0, _ := ret[0].(webhdfs.FileStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileStatus indicates an expected call of GetFileStatus
func (mr *MockClientMockRecorder) GetFileStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileStatus", reflect.TypeOf((*MockClient)(nil).GetFileStatus), arg0)
}

// ListFileStatus mocks base method
func (m *MockClient) ListFileStatus(arg0 string) ([]webhdfs.FileStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFileStatus", arg0)
	ret0, _ := ret[0].([]webhdfs.FileStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFileStatus indicates an expected call of ListFileStatus
func (mr *MockClientMockRecorder) ListFileStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFileStatus", reflect.TypeOf((*MockClient)(nil).ListFileStatus), arg0)
}

// Mkdirs mocks base method
func (m *MockClient) Mkdirs(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdirs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdirs indicates an expected call of Mkdirs
func (mr *MockClientMockRecorder) Mkdirs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdirs", reflect.TypeOf((*MockClient)(nil).Mkdirs), arg0)
}

// Open mocks base method
func (m *MockClient) Open(arg0 string, arg1 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockClientMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockClient)(nil).Open), arg0, arg1)
}

// Rename mocks base method
func (m *MockClient) Rename(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename
func (mr *MockClientMockRecorder) Rename(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockClient)(nil).Rename), arg0, arg1)
}
