// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/healthcheck (interfaces: PassiveFilter)

// Package mockhealthcheck is a generated GoMock package.
package mockhealthcheck

import (
	gomock "github.com/golang/mock/gomock"
	stringset "github.com/uber/kraken/utils/stringset"
	reflect "reflect"
)

// MockPassiveFilter is a mock of PassiveFilter interface
type MockPassiveFilter struct {
	ctrl     *gomock.Controller
	recorder *MockPassiveFilterMockRecorder
}

// MockPassiveFilterMockRecorder is the mock recorder for MockPassiveFilter
type MockPassiveFilterMockRecorder struct {
	mock *MockPassiveFilter
}

// NewMockPassiveFilter creates a new mock instance
func NewMockPassiveFilter(ctrl *gomock.Controller) *MockPassiveFilter {
	mock := &MockPassiveFilter{ctrl: ctrl}
	mock.recorder = &MockPassiveFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPassiveFilter) EXPECT() *MockPassiveFilterMockRecorder {
	return m.recorder
}

// Failed mocks base method
func (m *MockPassiveFilter) Failed(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Failed", arg0)
}

// Failed indicates an expected call of Failed
func (mr *MockPassiveFilterMockRecorder) Failed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockPassiveFilter)(nil).Failed), arg0)
}

// Run mocks base method
func (m *MockPassiveFilter) Run(arg0 stringset.Set) stringset.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(stringset.Set)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockPassiveFilterMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPassiveFilter)(nil).Run), arg0)
}
