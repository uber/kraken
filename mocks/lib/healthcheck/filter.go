// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/healthcheck (interfaces: Filter)

// Package mockhealthcheck is a generated GoMock package.
package mockhealthcheck

import (
	gomock "github.com/golang/mock/gomock"
	stringset "github.com/uber/kraken/utils/stringset"
	reflect "reflect"
)

// MockFilter is a mock of Filter interface
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
}

// MockFilterMockRecorder is the mock recorder for MockFilter
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockFilter) Run(arg0 stringset.Set) stringset.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(stringset.Set)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockFilterMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFilter)(nil).Run), arg0)
}
