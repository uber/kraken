// Automatically generated by MockGen. DO NOT EDIT!
// Source: code.uber.internal/infra/kraken/lib/store (interfaces: FileStore,FileReadWriter)

package mockstore

import (
	store "code.uber.internal/infra/kraken/lib/store"
	base "code.uber.internal/infra/kraken/lib/store/base"
	gomock "github.com/golang/mock/gomock"
	io "io"
	os "os"
)

// Mock of FileStore interface
type MockFileStore struct {
	ctrl     *gomock.Controller
	recorder *_MockFileStoreRecorder
}

// Recorder for MockFileStore (not exported)
type _MockFileStoreRecorder struct {
	mock *MockFileStore
}

func NewMockFileStore(ctrl *gomock.Controller) *MockFileStore {
	mock := &MockFileStore{ctrl: ctrl}
	mock.recorder = &_MockFileStoreRecorder{mock}
	return mock
}

func (_m *MockFileStore) EXPECT() *_MockFileStoreRecorder {
	return _m.recorder
}

func (_m *MockFileStore) Config() store.Config {
	ret := _m.ctrl.Call(_m, "Config")
	ret0, _ := ret[0].(store.Config)
	return ret0
}

func (_mr *_MockFileStoreRecorder) Config() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Config")
}

func (_m *MockFileStore) CreateCacheFile(_param0 string, _param1 io.Reader) error {
	ret := _m.ctrl.Call(_m, "CreateCacheFile", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) CreateCacheFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateCacheFile", arg0, arg1)
}

func (_m *MockFileStore) CreateDownloadFile(_param0 string, _param1 int64) error {
	ret := _m.ctrl.Call(_m, "CreateDownloadFile", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) CreateDownloadFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDownloadFile", arg0, arg1)
}

func (_m *MockFileStore) CreateUploadFile(_param0 string, _param1 int64) error {
	ret := _m.ctrl.Call(_m, "CreateUploadFile", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) CreateUploadFile(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateUploadFile", arg0, arg1)
}

func (_m *MockFileStore) DeleteAllTrashFiles() error {
	ret := _m.ctrl.Call(_m, "DeleteAllTrashFiles")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) DeleteAllTrashFiles() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAllTrashFiles")
}

func (_m *MockFileStore) DerefCacheFile(_param0 string) (int64, error) {
	ret := _m.ctrl.Call(_m, "DerefCacheFile", _param0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) DerefCacheFile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DerefCacheFile", arg0)
}

func (_m *MockFileStore) EnsureDownloadOrCacheFilePresent(_param0 string, _param1 int64) error {
	ret := _m.ctrl.Call(_m, "EnsureDownloadOrCacheFilePresent", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) EnsureDownloadOrCacheFilePresent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnsureDownloadOrCacheFilePresent", arg0, arg1)
}

func (_m *MockFileStore) GetCacheFilePath(_param0 string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetCacheFilePath", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetCacheFilePath(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCacheFilePath", arg0)
}

func (_m *MockFileStore) GetCacheFileReader(_param0 string) (base.FileReader, error) {
	ret := _m.ctrl.Call(_m, "GetCacheFileReader", _param0)
	ret0, _ := ret[0].(base.FileReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetCacheFileReader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCacheFileReader", arg0)
}

func (_m *MockFileStore) GetCacheFileStat(_param0 string) (os.FileInfo, error) {
	ret := _m.ctrl.Call(_m, "GetCacheFileStat", _param0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetCacheFileStat(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCacheFileStat", arg0)
}

func (_m *MockFileStore) GetDownloadFileReadWriter(_param0 string) (base.FileReadWriter, error) {
	ret := _m.ctrl.Call(_m, "GetDownloadFileReadWriter", _param0)
	ret0, _ := ret[0].(base.FileReadWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetDownloadFileReadWriter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDownloadFileReadWriter", arg0)
}

func (_m *MockFileStore) GetDownloadOrCacheFileMeta(_param0 string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetDownloadOrCacheFileMeta", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetDownloadOrCacheFileMeta(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDownloadOrCacheFileMeta", arg0)
}

func (_m *MockFileStore) GetDownloadOrCacheFileReader(_param0 string) (base.FileReader, error) {
	ret := _m.ctrl.Call(_m, "GetDownloadOrCacheFileReader", _param0)
	ret0, _ := ret[0].(base.FileReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetDownloadOrCacheFileReader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDownloadOrCacheFileReader", arg0)
}

func (_m *MockFileStore) GetUploadFileHashState(_param0 string, _param1 string, _param2 string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetUploadFileHashState", _param0, _param1, _param2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetUploadFileHashState(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUploadFileHashState", arg0, arg1, arg2)
}

func (_m *MockFileStore) GetUploadFileReadWriter(_param0 string) (base.FileReadWriter, error) {
	ret := _m.ctrl.Call(_m, "GetUploadFileReadWriter", _param0)
	ret0, _ := ret[0].(base.FileReadWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetUploadFileReadWriter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUploadFileReadWriter", arg0)
}

func (_m *MockFileStore) GetUploadFileReader(_param0 string) (base.FileReader, error) {
	ret := _m.ctrl.Call(_m, "GetUploadFileReader", _param0)
	ret0, _ := ret[0].(base.FileReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetUploadFileReader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUploadFileReader", arg0)
}

func (_m *MockFileStore) GetUploadFileStartedAt(_param0 string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetUploadFileStartedAt", _param0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetUploadFileStartedAt(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUploadFileStartedAt", arg0)
}

func (_m *MockFileStore) GetUploadFileStat(_param0 string) (os.FileInfo, error) {
	ret := _m.ctrl.Call(_m, "GetUploadFileStat", _param0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) GetUploadFileStat(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUploadFileStat", arg0)
}

func (_m *MockFileStore) InCacheError(_param0 error) bool {
	ret := _m.ctrl.Call(_m, "InCacheError", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockFileStoreRecorder) InCacheError(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InCacheError", arg0)
}

func (_m *MockFileStore) ListCacheFilesByShardID(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListCacheFilesByShardID", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) ListCacheFilesByShardID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCacheFilesByShardID", arg0)
}

func (_m *MockFileStore) ListPopulatedShardIDs() ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListPopulatedShardIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) ListPopulatedShardIDs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPopulatedShardIDs")
}

func (_m *MockFileStore) ListUploadFileHashStatePaths(_param0 string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListUploadFileHashStatePaths", _param0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) ListUploadFileHashStatePaths(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUploadFileHashStatePaths", arg0)
}

func (_m *MockFileStore) MoveCacheFileToTrash(_param0 string) error {
	ret := _m.ctrl.Call(_m, "MoveCacheFileToTrash", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) MoveCacheFileToTrash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MoveCacheFileToTrash", arg0)
}

func (_m *MockFileStore) MoveDownloadFileToCache(_param0 string) error {
	ret := _m.ctrl.Call(_m, "MoveDownloadFileToCache", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) MoveDownloadFileToCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MoveDownloadFileToCache", arg0)
}

func (_m *MockFileStore) MoveDownloadOrCacheFileToTrash(_param0 string) error {
	ret := _m.ctrl.Call(_m, "MoveDownloadOrCacheFileToTrash", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) MoveDownloadOrCacheFileToTrash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MoveDownloadOrCacheFileToTrash", arg0)
}

func (_m *MockFileStore) MoveUploadFileToCache(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "MoveUploadFileToCache", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) MoveUploadFileToCache(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MoveUploadFileToCache", arg0, arg1)
}

func (_m *MockFileStore) RefCacheFile(_param0 string) (int64, error) {
	ret := _m.ctrl.Call(_m, "RefCacheFile", _param0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) RefCacheFile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefCacheFile", arg0)
}

func (_m *MockFileStore) SetDownloadOrCacheFileMeta(_param0 string, _param1 []byte) (bool, error) {
	ret := _m.ctrl.Call(_m, "SetDownloadOrCacheFileMeta", _param0, _param1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) SetDownloadOrCacheFileMeta(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDownloadOrCacheFileMeta", arg0, arg1)
}

func (_m *MockFileStore) SetUploadFileHashState(_param0 string, _param1 []byte, _param2 string, _param3 string) error {
	ret := _m.ctrl.Call(_m, "SetUploadFileHashState", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) SetUploadFileHashState(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUploadFileHashState", arg0, arg1, arg2, arg3)
}

func (_m *MockFileStore) SetUploadFileStartedAt(_param0 string, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "SetUploadFileStartedAt", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileStoreRecorder) SetUploadFileStartedAt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetUploadFileStartedAt", arg0, arg1)
}

func (_m *MockFileStore) States() *store.StateAcceptor {
	ret := _m.ctrl.Call(_m, "States")
	ret0, _ := ret[0].(*store.StateAcceptor)
	return ret0
}

func (_mr *_MockFileStoreRecorder) States() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "States")
}

func (_m *MockFileStore) WriteDownloadFilePieceStatus(_param0 string, _param1 []byte) (bool, error) {
	ret := _m.ctrl.Call(_m, "WriteDownloadFilePieceStatus", _param0, _param1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) WriteDownloadFilePieceStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteDownloadFilePieceStatus", arg0, arg1)
}

func (_m *MockFileStore) WriteDownloadFilePieceStatusAt(_param0 string, _param1 []byte, _param2 int) (bool, error) {
	ret := _m.ctrl.Call(_m, "WriteDownloadFilePieceStatusAt", _param0, _param1, _param2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileStoreRecorder) WriteDownloadFilePieceStatusAt(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteDownloadFilePieceStatusAt", arg0, arg1, arg2)
}

// Mock of FileReadWriter interface
type MockFileReadWriter struct {
	ctrl     *gomock.Controller
	recorder *_MockFileReadWriterRecorder
}

// Recorder for MockFileReadWriter (not exported)
type _MockFileReadWriterRecorder struct {
	mock *MockFileReadWriter
}

func NewMockFileReadWriter(ctrl *gomock.Controller) *MockFileReadWriter {
	mock := &MockFileReadWriter{ctrl: ctrl}
	mock.recorder = &_MockFileReadWriterRecorder{mock}
	return mock
}

func (_m *MockFileReadWriter) EXPECT() *_MockFileReadWriterRecorder {
	return _m.recorder
}

func (_m *MockFileReadWriter) Cancel() error {
	ret := _m.ctrl.Call(_m, "Cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileReadWriterRecorder) Cancel() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cancel")
}

func (_m *MockFileReadWriter) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileReadWriterRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockFileReadWriter) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockFileReadWriterRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

func (_m *MockFileReadWriter) Read(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileReadWriterRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}

func (_m *MockFileReadWriter) ReadAt(_param0 []byte, _param1 int64) (int, error) {
	ret := _m.ctrl.Call(_m, "ReadAt", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileReadWriterRecorder) ReadAt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadAt", arg0, arg1)
}

func (_m *MockFileReadWriter) Seek(_param0 int64, _param1 int) (int64, error) {
	ret := _m.ctrl.Call(_m, "Seek", _param0, _param1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileReadWriterRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Seek", arg0, arg1)
}

func (_m *MockFileReadWriter) Size() int64 {
	ret := _m.ctrl.Call(_m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockFileReadWriterRecorder) Size() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Size")
}

func (_m *MockFileReadWriter) Write(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Write", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileReadWriterRecorder) Write(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0)
}

func (_m *MockFileReadWriter) WriteAt(_param0 []byte, _param1 int64) (int, error) {
	ret := _m.ctrl.Call(_m, "WriteAt", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileReadWriterRecorder) WriteAt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteAt", arg0, arg1)
}
