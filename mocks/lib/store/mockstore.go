// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/lib/store (interfaces: FileReadWriter)

// Package mockstore is a generated GoMock package.
package mockstore

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileReadWriter is a mock of FileReadWriter interface
type MockFileReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFileReadWriterMockRecorder
}

// MockFileReadWriterMockRecorder is the mock recorder for MockFileReadWriter
type MockFileReadWriterMockRecorder struct {
	mock *MockFileReadWriter
}

// NewMockFileReadWriter creates a new mock instance
func NewMockFileReadWriter(ctrl *gomock.Controller) *MockFileReadWriter {
	mock := &MockFileReadWriter{ctrl: ctrl}
	mock.recorder = &MockFileReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileReadWriter) EXPECT() *MockFileReadWriterMockRecorder {
	return m.recorder
}

// Cancel mocks base method
func (m *MockFileReadWriter) Cancel() error {
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockFileReadWriterMockRecorder) Cancel() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockFileReadWriter)(nil).Cancel))
}

// Close mocks base method
func (m *MockFileReadWriter) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockFileReadWriterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFileReadWriter)(nil).Close))
}

// Commit mocks base method
func (m *MockFileReadWriter) Commit() error {
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockFileReadWriterMockRecorder) Commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockFileReadWriter)(nil).Commit))
}

// Read mocks base method
func (m *MockFileReadWriter) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockFileReadWriterMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileReadWriter)(nil).Read), arg0)
}

// ReadAt mocks base method
func (m *MockFileReadWriter) ReadAt(arg0 []byte, arg1 int64) (int, error) {
	ret := m.ctrl.Call(m, "ReadAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt
func (mr *MockFileReadWriterMockRecorder) ReadAt(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockFileReadWriter)(nil).ReadAt), arg0, arg1)
}

// Seek mocks base method
func (m *MockFileReadWriter) Seek(arg0 int64, arg1 int) (int64, error) {
	ret := m.ctrl.Call(m, "Seek", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockFileReadWriterMockRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockFileReadWriter)(nil).Seek), arg0, arg1)
}

// Size mocks base method
func (m *MockFileReadWriter) Size() int64 {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockFileReadWriterMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockFileReadWriter)(nil).Size))
}

// Write mocks base method
func (m *MockFileReadWriter) Write(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockFileReadWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFileReadWriter)(nil).Write), arg0)
}

// WriteAt mocks base method
func (m *MockFileReadWriter) WriteAt(arg0 []byte, arg1 int64) (int, error) {
	ret := m.ctrl.Call(m, "WriteAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt
func (mr *MockFileReadWriterMockRecorder) WriteAt(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockFileReadWriter)(nil).WriteAt), arg0, arg1)
}
