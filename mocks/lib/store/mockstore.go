// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/lib/store (interfaces: FileStore,FileReadWriter,OriginFileStore)

// Package mockstore is a generated GoMock package.
package mockstore

import (
	store "code.uber.internal/infra/kraken/lib/store"
	base "code.uber.internal/infra/kraken/lib/store/base"
	metadata "code.uber.internal/infra/kraken/lib/store/metadata"
	gomock "github.com/golang/mock/gomock"
	io "io"
	os "os"
	reflect "reflect"
)

// MockFileStore is a mock of FileStore interface
type MockFileStore struct {
	ctrl     *gomock.Controller
	recorder *MockFileStoreMockRecorder
}

// MockFileStoreMockRecorder is the mock recorder for MockFileStore
type MockFileStoreMockRecorder struct {
	mock *MockFileStore
}

// NewMockFileStore creates a new mock instance
func NewMockFileStore(ctrl *gomock.Controller) *MockFileStore {
	mock := &MockFileStore{ctrl: ctrl}
	mock.recorder = &MockFileStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileStore) EXPECT() *MockFileStoreMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockFileStore) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockFileStoreMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFileStore)(nil).Close))
}

// Config mocks base method
func (m *MockFileStore) Config() store.Config {
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(store.Config)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockFileStoreMockRecorder) Config() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockFileStore)(nil).Config))
}

// CreateCacheFile mocks base method
func (m *MockFileStore) CreateCacheFile(arg0 string, arg1 io.Reader) error {
	ret := m.ctrl.Call(m, "CreateCacheFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCacheFile indicates an expected call of CreateCacheFile
func (mr *MockFileStoreMockRecorder) CreateCacheFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCacheFile", reflect.TypeOf((*MockFileStore)(nil).CreateCacheFile), arg0, arg1)
}

// CreateDownloadFile mocks base method
func (m *MockFileStore) CreateDownloadFile(arg0 string, arg1 int64) error {
	ret := m.ctrl.Call(m, "CreateDownloadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDownloadFile indicates an expected call of CreateDownloadFile
func (mr *MockFileStoreMockRecorder) CreateDownloadFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDownloadFile", reflect.TypeOf((*MockFileStore)(nil).CreateDownloadFile), arg0, arg1)
}

// CreateUploadFile mocks base method
func (m *MockFileStore) CreateUploadFile(arg0 string, arg1 int64) error {
	ret := m.ctrl.Call(m, "CreateUploadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUploadFile indicates an expected call of CreateUploadFile
func (mr *MockFileStoreMockRecorder) CreateUploadFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadFile", reflect.TypeOf((*MockFileStore)(nil).CreateUploadFile), arg0, arg1)
}

// DeleteDownloadOrCacheFile mocks base method
func (m *MockFileStore) DeleteDownloadOrCacheFile(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteDownloadOrCacheFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDownloadOrCacheFile indicates an expected call of DeleteDownloadOrCacheFile
func (mr *MockFileStoreMockRecorder) DeleteDownloadOrCacheFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDownloadOrCacheFile", reflect.TypeOf((*MockFileStore)(nil).DeleteDownloadOrCacheFile), arg0)
}

// EnsureDownloadOrCacheFilePresent mocks base method
func (m *MockFileStore) EnsureDownloadOrCacheFilePresent(arg0 string, arg1 int64) error {
	ret := m.ctrl.Call(m, "EnsureDownloadOrCacheFilePresent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureDownloadOrCacheFilePresent indicates an expected call of EnsureDownloadOrCacheFilePresent
func (mr *MockFileStoreMockRecorder) EnsureDownloadOrCacheFilePresent(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDownloadOrCacheFilePresent", reflect.TypeOf((*MockFileStore)(nil).EnsureDownloadOrCacheFilePresent), arg0, arg1)
}

// GetCacheFilePath mocks base method
func (m *MockFileStore) GetCacheFilePath(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "GetCacheFilePath", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheFilePath indicates an expected call of GetCacheFilePath
func (mr *MockFileStoreMockRecorder) GetCacheFilePath(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheFilePath", reflect.TypeOf((*MockFileStore)(nil).GetCacheFilePath), arg0)
}

// GetCacheFileReader mocks base method
func (m *MockFileStore) GetCacheFileReader(arg0 string) (base.FileReader, error) {
	ret := m.ctrl.Call(m, "GetCacheFileReader", arg0)
	ret0, _ := ret[0].(base.FileReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheFileReader indicates an expected call of GetCacheFileReader
func (mr *MockFileStoreMockRecorder) GetCacheFileReader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheFileReader", reflect.TypeOf((*MockFileStore)(nil).GetCacheFileReader), arg0)
}

// GetCacheFileStat mocks base method
func (m *MockFileStore) GetCacheFileStat(arg0 string) (os.FileInfo, error) {
	ret := m.ctrl.Call(m, "GetCacheFileStat", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheFileStat indicates an expected call of GetCacheFileStat
func (mr *MockFileStoreMockRecorder) GetCacheFileStat(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheFileStat", reflect.TypeOf((*MockFileStore)(nil).GetCacheFileStat), arg0)
}

// GetDownloadFileReadWriter mocks base method
func (m *MockFileStore) GetDownloadFileReadWriter(arg0 string) (base.FileReadWriter, error) {
	ret := m.ctrl.Call(m, "GetDownloadFileReadWriter", arg0)
	ret0, _ := ret[0].(base.FileReadWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadFileReadWriter indicates an expected call of GetDownloadFileReadWriter
func (mr *MockFileStoreMockRecorder) GetDownloadFileReadWriter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadFileReadWriter", reflect.TypeOf((*MockFileStore)(nil).GetDownloadFileReadWriter), arg0)
}

// GetDownloadOrCacheFileReader mocks base method
func (m *MockFileStore) GetDownloadOrCacheFileReader(arg0 string) (base.FileReader, error) {
	ret := m.ctrl.Call(m, "GetDownloadOrCacheFileReader", arg0)
	ret0, _ := ret[0].(base.FileReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadOrCacheFileReader indicates an expected call of GetDownloadOrCacheFileReader
func (mr *MockFileStoreMockRecorder) GetDownloadOrCacheFileReader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadOrCacheFileReader", reflect.TypeOf((*MockFileStore)(nil).GetDownloadOrCacheFileReader), arg0)
}

// GetUploadFileMetadata mocks base method
func (m *MockFileStore) GetUploadFileMetadata(arg0 string, arg1 metadata.Metadata) error {
	ret := m.ctrl.Call(m, "GetUploadFileMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUploadFileMetadata indicates an expected call of GetUploadFileMetadata
func (mr *MockFileStoreMockRecorder) GetUploadFileMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadFileMetadata", reflect.TypeOf((*MockFileStore)(nil).GetUploadFileMetadata), arg0, arg1)
}

// GetUploadFileReadWriter mocks base method
func (m *MockFileStore) GetUploadFileReadWriter(arg0 string) (base.FileReadWriter, error) {
	ret := m.ctrl.Call(m, "GetUploadFileReadWriter", arg0)
	ret0, _ := ret[0].(base.FileReadWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadFileReadWriter indicates an expected call of GetUploadFileReadWriter
func (mr *MockFileStoreMockRecorder) GetUploadFileReadWriter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadFileReadWriter", reflect.TypeOf((*MockFileStore)(nil).GetUploadFileReadWriter), arg0)
}

// GetUploadFileReader mocks base method
func (m *MockFileStore) GetUploadFileReader(arg0 string) (base.FileReader, error) {
	ret := m.ctrl.Call(m, "GetUploadFileReader", arg0)
	ret0, _ := ret[0].(base.FileReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadFileReader indicates an expected call of GetUploadFileReader
func (mr *MockFileStoreMockRecorder) GetUploadFileReader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadFileReader", reflect.TypeOf((*MockFileStore)(nil).GetUploadFileReader), arg0)
}

// GetUploadFileStat mocks base method
func (m *MockFileStore) GetUploadFileStat(arg0 string) (os.FileInfo, error) {
	ret := m.ctrl.Call(m, "GetUploadFileStat", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadFileStat indicates an expected call of GetUploadFileStat
func (mr *MockFileStoreMockRecorder) GetUploadFileStat(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadFileStat", reflect.TypeOf((*MockFileStore)(nil).GetUploadFileStat), arg0)
}

// InCacheError mocks base method
func (m *MockFileStore) InCacheError(arg0 error) bool {
	ret := m.ctrl.Call(m, "InCacheError", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InCacheError indicates an expected call of InCacheError
func (mr *MockFileStoreMockRecorder) InCacheError(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InCacheError", reflect.TypeOf((*MockFileStore)(nil).InCacheError), arg0)
}

// InDownloadError mocks base method
func (m *MockFileStore) InDownloadError(arg0 error) bool {
	ret := m.ctrl.Call(m, "InDownloadError", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InDownloadError indicates an expected call of InDownloadError
func (mr *MockFileStoreMockRecorder) InDownloadError(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InDownloadError", reflect.TypeOf((*MockFileStore)(nil).InDownloadError), arg0)
}

// MoveDownloadFileToCache mocks base method
func (m *MockFileStore) MoveDownloadFileToCache(arg0 string) error {
	ret := m.ctrl.Call(m, "MoveDownloadFileToCache", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveDownloadFileToCache indicates an expected call of MoveDownloadFileToCache
func (mr *MockFileStoreMockRecorder) MoveDownloadFileToCache(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveDownloadFileToCache", reflect.TypeOf((*MockFileStore)(nil).MoveDownloadFileToCache), arg0)
}

// MoveUploadFileToCache mocks base method
func (m *MockFileStore) MoveUploadFileToCache(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "MoveUploadFileToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveUploadFileToCache indicates an expected call of MoveUploadFileToCache
func (mr *MockFileStoreMockRecorder) MoveUploadFileToCache(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveUploadFileToCache", reflect.TypeOf((*MockFileStore)(nil).MoveUploadFileToCache), arg0, arg1)
}

// RangeUploadMetadata mocks base method
func (m *MockFileStore) RangeUploadMetadata(arg0 string, arg1 func(metadata.Metadata) error) error {
	ret := m.ctrl.Call(m, "RangeUploadMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RangeUploadMetadata indicates an expected call of RangeUploadMetadata
func (mr *MockFileStoreMockRecorder) RangeUploadMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeUploadMetadata", reflect.TypeOf((*MockFileStore)(nil).RangeUploadMetadata), arg0, arg1)
}

// SetUploadFileMetadata mocks base method
func (m *MockFileStore) SetUploadFileMetadata(arg0 string, arg1 metadata.Metadata) error {
	ret := m.ctrl.Call(m, "SetUploadFileMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUploadFileMetadata indicates an expected call of SetUploadFileMetadata
func (mr *MockFileStoreMockRecorder) SetUploadFileMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUploadFileMetadata", reflect.TypeOf((*MockFileStore)(nil).SetUploadFileMetadata), arg0, arg1)
}

// States mocks base method
func (m *MockFileStore) States() *store.StateAcceptor {
	ret := m.ctrl.Call(m, "States")
	ret0, _ := ret[0].(*store.StateAcceptor)
	return ret0
}

// States indicates an expected call of States
func (mr *MockFileStoreMockRecorder) States() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "States", reflect.TypeOf((*MockFileStore)(nil).States))
}

// MockFileReadWriter is a mock of FileReadWriter interface
type MockFileReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFileReadWriterMockRecorder
}

// MockFileReadWriterMockRecorder is the mock recorder for MockFileReadWriter
type MockFileReadWriterMockRecorder struct {
	mock *MockFileReadWriter
}

// NewMockFileReadWriter creates a new mock instance
func NewMockFileReadWriter(ctrl *gomock.Controller) *MockFileReadWriter {
	mock := &MockFileReadWriter{ctrl: ctrl}
	mock.recorder = &MockFileReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileReadWriter) EXPECT() *MockFileReadWriterMockRecorder {
	return m.recorder
}

// Cancel mocks base method
func (m *MockFileReadWriter) Cancel() error {
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockFileReadWriterMockRecorder) Cancel() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockFileReadWriter)(nil).Cancel))
}

// Close mocks base method
func (m *MockFileReadWriter) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockFileReadWriterMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFileReadWriter)(nil).Close))
}

// Commit mocks base method
func (m *MockFileReadWriter) Commit() error {
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockFileReadWriterMockRecorder) Commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockFileReadWriter)(nil).Commit))
}

// Read mocks base method
func (m *MockFileReadWriter) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockFileReadWriterMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileReadWriter)(nil).Read), arg0)
}

// ReadAt mocks base method
func (m *MockFileReadWriter) ReadAt(arg0 []byte, arg1 int64) (int, error) {
	ret := m.ctrl.Call(m, "ReadAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt
func (mr *MockFileReadWriterMockRecorder) ReadAt(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockFileReadWriter)(nil).ReadAt), arg0, arg1)
}

// Seek mocks base method
func (m *MockFileReadWriter) Seek(arg0 int64, arg1 int) (int64, error) {
	ret := m.ctrl.Call(m, "Seek", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockFileReadWriterMockRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockFileReadWriter)(nil).Seek), arg0, arg1)
}

// Size mocks base method
func (m *MockFileReadWriter) Size() int64 {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockFileReadWriterMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockFileReadWriter)(nil).Size))
}

// Write mocks base method
func (m *MockFileReadWriter) Write(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockFileReadWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFileReadWriter)(nil).Write), arg0)
}

// WriteAt mocks base method
func (m *MockFileReadWriter) WriteAt(arg0 []byte, arg1 int64) (int, error) {
	ret := m.ctrl.Call(m, "WriteAt", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteAt indicates an expected call of WriteAt
func (mr *MockFileReadWriterMockRecorder) WriteAt(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteAt", reflect.TypeOf((*MockFileReadWriter)(nil).WriteAt), arg0, arg1)
}

// MockOriginFileStore is a mock of OriginFileStore interface
type MockOriginFileStore struct {
	ctrl     *gomock.Controller
	recorder *MockOriginFileStoreMockRecorder
}

// MockOriginFileStoreMockRecorder is the mock recorder for MockOriginFileStore
type MockOriginFileStoreMockRecorder struct {
	mock *MockOriginFileStore
}

// NewMockOriginFileStore creates a new mock instance
func NewMockOriginFileStore(ctrl *gomock.Controller) *MockOriginFileStore {
	mock := &MockOriginFileStore{ctrl: ctrl}
	mock.recorder = &MockOriginFileStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOriginFileStore) EXPECT() *MockOriginFileStoreMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockOriginFileStore) Config() store.OriginConfig {
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(store.OriginConfig)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockOriginFileStoreMockRecorder) Config() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockOriginFileStore)(nil).Config))
}

// CreateCacheFile mocks base method
func (m *MockOriginFileStore) CreateCacheFile(arg0 string, arg1 io.Reader) error {
	ret := m.ctrl.Call(m, "CreateCacheFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCacheFile indicates an expected call of CreateCacheFile
func (mr *MockOriginFileStoreMockRecorder) CreateCacheFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCacheFile", reflect.TypeOf((*MockOriginFileStore)(nil).CreateCacheFile), arg0, arg1)
}

// CreateUploadFile mocks base method
func (m *MockOriginFileStore) CreateUploadFile(arg0 string, arg1 int64) error {
	ret := m.ctrl.Call(m, "CreateUploadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUploadFile indicates an expected call of CreateUploadFile
func (mr *MockOriginFileStoreMockRecorder) CreateUploadFile(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUploadFile", reflect.TypeOf((*MockOriginFileStore)(nil).CreateUploadFile), arg0, arg1)
}

// DeleteCacheFile mocks base method
func (m *MockOriginFileStore) DeleteCacheFile(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteCacheFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCacheFile indicates an expected call of DeleteCacheFile
func (mr *MockOriginFileStoreMockRecorder) DeleteCacheFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCacheFile", reflect.TypeOf((*MockOriginFileStore)(nil).DeleteCacheFile), arg0)
}

// GetCacheFileMetadata mocks base method
func (m *MockOriginFileStore) GetCacheFileMetadata(arg0 string, arg1 metadata.Metadata) error {
	ret := m.ctrl.Call(m, "GetCacheFileMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetCacheFileMetadata indicates an expected call of GetCacheFileMetadata
func (mr *MockOriginFileStoreMockRecorder) GetCacheFileMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheFileMetadata", reflect.TypeOf((*MockOriginFileStore)(nil).GetCacheFileMetadata), arg0, arg1)
}

// GetCacheFileReader mocks base method
func (m *MockOriginFileStore) GetCacheFileReader(arg0 string) (base.FileReader, error) {
	ret := m.ctrl.Call(m, "GetCacheFileReader", arg0)
	ret0, _ := ret[0].(base.FileReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheFileReader indicates an expected call of GetCacheFileReader
func (mr *MockOriginFileStoreMockRecorder) GetCacheFileReader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheFileReader", reflect.TypeOf((*MockOriginFileStore)(nil).GetCacheFileReader), arg0)
}

// GetCacheFileStat mocks base method
func (m *MockOriginFileStore) GetCacheFileStat(arg0 string) (os.FileInfo, error) {
	ret := m.ctrl.Call(m, "GetCacheFileStat", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheFileStat indicates an expected call of GetCacheFileStat
func (mr *MockOriginFileStoreMockRecorder) GetCacheFileStat(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheFileStat", reflect.TypeOf((*MockOriginFileStore)(nil).GetCacheFileStat), arg0)
}

// GetOrSetCacheFileMetadata mocks base method
func (m *MockOriginFileStore) GetOrSetCacheFileMetadata(arg0 string, arg1 metadata.Metadata) error {
	ret := m.ctrl.Call(m, "GetOrSetCacheFileMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrSetCacheFileMetadata indicates an expected call of GetOrSetCacheFileMetadata
func (mr *MockOriginFileStoreMockRecorder) GetOrSetCacheFileMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrSetCacheFileMetadata", reflect.TypeOf((*MockOriginFileStore)(nil).GetOrSetCacheFileMetadata), arg0, arg1)
}

// GetUploadFileReadWriter mocks base method
func (m *MockOriginFileStore) GetUploadFileReadWriter(arg0 string) (base.FileReadWriter, error) {
	ret := m.ctrl.Call(m, "GetUploadFileReadWriter", arg0)
	ret0, _ := ret[0].(base.FileReadWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadFileReadWriter indicates an expected call of GetUploadFileReadWriter
func (mr *MockOriginFileStoreMockRecorder) GetUploadFileReadWriter(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadFileReadWriter", reflect.TypeOf((*MockOriginFileStore)(nil).GetUploadFileReadWriter), arg0)
}

// GetUploadFileReader mocks base method
func (m *MockOriginFileStore) GetUploadFileReader(arg0 string) (base.FileReader, error) {
	ret := m.ctrl.Call(m, "GetUploadFileReader", arg0)
	ret0, _ := ret[0].(base.FileReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadFileReader indicates an expected call of GetUploadFileReader
func (mr *MockOriginFileStoreMockRecorder) GetUploadFileReader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadFileReader", reflect.TypeOf((*MockOriginFileStore)(nil).GetUploadFileReader), arg0)
}

// GetUploadFileStat mocks base method
func (m *MockOriginFileStore) GetUploadFileStat(arg0 string) (os.FileInfo, error) {
	ret := m.ctrl.Call(m, "GetUploadFileStat", arg0)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUploadFileStat indicates an expected call of GetUploadFileStat
func (mr *MockOriginFileStoreMockRecorder) GetUploadFileStat(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUploadFileStat", reflect.TypeOf((*MockOriginFileStore)(nil).GetUploadFileStat), arg0)
}

// MoveUploadFileToCache mocks base method
func (m *MockOriginFileStore) MoveUploadFileToCache(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "MoveUploadFileToCache", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveUploadFileToCache indicates an expected call of MoveUploadFileToCache
func (mr *MockOriginFileStoreMockRecorder) MoveUploadFileToCache(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveUploadFileToCache", reflect.TypeOf((*MockOriginFileStore)(nil).MoveUploadFileToCache), arg0, arg1)
}

// RangeUploadMetadata mocks base method
func (m *MockOriginFileStore) RangeUploadMetadata(arg0 string, arg1 func(metadata.Metadata) error) error {
	ret := m.ctrl.Call(m, "RangeUploadMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RangeUploadMetadata indicates an expected call of RangeUploadMetadata
func (mr *MockOriginFileStoreMockRecorder) RangeUploadMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RangeUploadMetadata", reflect.TypeOf((*MockOriginFileStore)(nil).RangeUploadMetadata), arg0, arg1)
}

// SetCacheFileMetadata mocks base method
func (m *MockOriginFileStore) SetCacheFileMetadata(arg0 string, arg1 metadata.Metadata) (bool, error) {
	ret := m.ctrl.Call(m, "SetCacheFileMetadata", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCacheFileMetadata indicates an expected call of SetCacheFileMetadata
func (mr *MockOriginFileStoreMockRecorder) SetCacheFileMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCacheFileMetadata", reflect.TypeOf((*MockOriginFileStore)(nil).SetCacheFileMetadata), arg0, arg1)
}
