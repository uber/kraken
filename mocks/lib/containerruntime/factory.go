// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/containerruntime (interfaces: Factory)

// Package mockcontainerruntime is a generated GoMock package.
package mockcontainerruntime

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	containerd "github.com/uber/kraken/lib/containerruntime/containerd"
	dockerdaemon "github.com/uber/kraken/lib/containerruntime/dockerdaemon"
)

// MockFactory is a mock of Factory interface
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// ContainerdClient mocks base method
func (m *MockFactory) ContainerdClient() containerd.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerdClient")
	ret0, _ := ret[0].(containerd.Client)
	return ret0
}

// ContainerdClient indicates an expected call of ContainerdClient
func (mr *MockFactoryMockRecorder) ContainerdClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerdClient", reflect.TypeOf((*MockFactory)(nil).ContainerdClient))
}

// DockerClient mocks base method
func (m *MockFactory) DockerClient() dockerdaemon.DockerClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerClient")
	ret0, _ := ret[0].(dockerdaemon.DockerClient)
	return ret0
}

// DockerClient indicates an expected call of DockerClient
func (mr *MockFactoryMockRecorder) DockerClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerClient", reflect.TypeOf((*MockFactory)(nil).DockerClient))
}
