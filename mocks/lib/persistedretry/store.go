// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/persistedretry (interfaces: Store)

// Package mockpersistedretry is a generated GoMock package.
package mockpersistedretry

import (
	gomock "github.com/golang/mock/gomock"
	persistedretry "github.com/uber/kraken/lib/persistedretry"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddFailed mocks base method
func (m *MockStore) AddFailed(arg0 persistedretry.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFailed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFailed indicates an expected call of AddFailed
func (mr *MockStoreMockRecorder) AddFailed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFailed", reflect.TypeOf((*MockStore)(nil).AddFailed), arg0)
}

// AddPending mocks base method
func (m *MockStore) AddPending(arg0 persistedretry.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPending", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPending indicates an expected call of AddPending
func (mr *MockStoreMockRecorder) AddPending(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPending", reflect.TypeOf((*MockStore)(nil).AddPending), arg0)
}

// Find mocks base method
func (m *MockStore) Find(arg0 interface{}) ([]persistedretry.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].([]persistedretry.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockStoreMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockStore)(nil).Find), arg0)
}

// GetFailed mocks base method
func (m *MockStore) GetFailed() ([]persistedretry.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailed")
	ret0, _ := ret[0].([]persistedretry.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailed indicates an expected call of GetFailed
func (mr *MockStoreMockRecorder) GetFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailed", reflect.TypeOf((*MockStore)(nil).GetFailed))
}

// GetPending mocks base method
func (m *MockStore) GetPending() ([]persistedretry.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPending")
	ret0, _ := ret[0].([]persistedretry.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPending indicates an expected call of GetPending
func (mr *MockStoreMockRecorder) GetPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPending", reflect.TypeOf((*MockStore)(nil).GetPending))
}

// MarkFailed mocks base method
func (m *MockStore) MarkFailed(arg0 persistedretry.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFailed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFailed indicates an expected call of MarkFailed
func (mr *MockStoreMockRecorder) MarkFailed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFailed", reflect.TypeOf((*MockStore)(nil).MarkFailed), arg0)
}

// MarkPending mocks base method
func (m *MockStore) MarkPending(arg0 persistedretry.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkPending", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkPending indicates an expected call of MarkPending
func (mr *MockStoreMockRecorder) MarkPending(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkPending", reflect.TypeOf((*MockStore)(nil).MarkPending), arg0)
}

// Remove mocks base method
func (m *MockStore) Remove(arg0 persistedretry.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockStoreMockRecorder) Remove(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockStore)(nil).Remove), arg0)
}
