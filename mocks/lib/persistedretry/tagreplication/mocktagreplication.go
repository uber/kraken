// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/persistedretry/tagreplication (interfaces: RemoteValidator)

// Package mocktagreplication is a generated GoMock package.
package mocktagreplication

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRemoteValidator is a mock of RemoteValidator interface
type MockRemoteValidator struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteValidatorMockRecorder
}

// MockRemoteValidatorMockRecorder is the mock recorder for MockRemoteValidator
type MockRemoteValidatorMockRecorder struct {
	mock *MockRemoteValidator
}

// NewMockRemoteValidator creates a new mock instance
func NewMockRemoteValidator(ctrl *gomock.Controller) *MockRemoteValidator {
	mock := &MockRemoteValidator{ctrl: ctrl}
	mock.recorder = &MockRemoteValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRemoteValidator) EXPECT() *MockRemoteValidatorMockRecorder {
	return m.recorder
}

// Valid mocks base method
func (m *MockRemoteValidator) Valid(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Valid", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Valid indicates an expected call of Valid
func (mr *MockRemoteValidatorMockRecorder) Valid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Valid", reflect.TypeOf((*MockRemoteValidator)(nil).Valid), arg0, arg1)
}
