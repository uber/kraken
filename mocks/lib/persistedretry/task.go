// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/lib/persistedretry (interfaces: Task)

// Package mockpersistedretry is a generated GoMock package.
package mockpersistedretry

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockTask is a mock of Task interface
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// GetFailures mocks base method
func (m *MockTask) GetFailures() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailures")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFailures indicates an expected call of GetFailures
func (mr *MockTaskMockRecorder) GetFailures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailures", reflect.TypeOf((*MockTask)(nil).GetFailures))
}

// GetLastAttempt mocks base method
func (m *MockTask) GetLastAttempt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastAttempt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastAttempt indicates an expected call of GetLastAttempt
func (mr *MockTaskMockRecorder) GetLastAttempt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastAttempt", reflect.TypeOf((*MockTask)(nil).GetLastAttempt))
}

// Ready mocks base method
func (m *MockTask) Ready() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ready indicates an expected call of Ready
func (mr *MockTaskMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockTask)(nil).Ready))
}
