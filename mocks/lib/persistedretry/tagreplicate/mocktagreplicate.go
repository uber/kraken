// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/lib/persistedretry/tagreplicate (interfaces: TaskGenerator)

// Package mocktagreplicate is a generated GoMock package.
package mocktagreplicate

import (
	core "code.uber.internal/infra/kraken/core"
	tagreplicate "code.uber.internal/infra/kraken/lib/persistedretry/tagreplicate"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaskGenerator is a mock of TaskGenerator interface
type MockTaskGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockTaskGeneratorMockRecorder
}

// MockTaskGeneratorMockRecorder is the mock recorder for MockTaskGenerator
type MockTaskGeneratorMockRecorder struct {
	mock *MockTaskGenerator
}

// NewMockTaskGenerator creates a new mock instance
func NewMockTaskGenerator(ctrl *gomock.Controller) *MockTaskGenerator {
	mock := &MockTaskGenerator{ctrl: ctrl}
	mock.recorder = &MockTaskGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskGenerator) EXPECT() *MockTaskGeneratorMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTaskGenerator) Create(arg0 string, arg1 core.Digest, arg2 ...core.Digest) ([]*tagreplicate.Task, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].([]*tagreplicate.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockTaskGeneratorMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskGenerator)(nil).Create), varargs...)
}

// IsValid mocks base method
func (m *MockTaskGenerator) IsValid(arg0 tagreplicate.Task) bool {
	ret := m.ctrl.Call(m, "IsValid", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid
func (mr *MockTaskGeneratorMockRecorder) IsValid(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockTaskGenerator)(nil).IsValid), arg0)
}

// Load mocks base method
func (m *MockTaskGenerator) Load(arg0 *tagreplicate.Task) error {
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockTaskGeneratorMockRecorder) Load(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockTaskGenerator)(nil).Load), arg0)
}
