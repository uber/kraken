// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/utils/dedup (interfaces: TaskRunner,IntervalTask)

// Package mockdedup is a generated GoMock package.
package mockdedup

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockTaskRunner is a mock of TaskRunner interface
type MockTaskRunner struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRunnerMockRecorder
}

// MockTaskRunnerMockRecorder is the mock recorder for MockTaskRunner
type MockTaskRunnerMockRecorder struct {
	mock *MockTaskRunner
}

// NewMockTaskRunner creates a new mock instance
func NewMockTaskRunner(ctrl *gomock.Controller) *MockTaskRunner {
	mock := &MockTaskRunner{ctrl: ctrl}
	mock.recorder = &MockTaskRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskRunner) EXPECT() *MockTaskRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockTaskRunner) Run(arg0 interface{}) (interface{}, time.Duration) {
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(time.Duration)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockTaskRunnerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTaskRunner)(nil).Run), arg0)
}

// MockIntervalTask is a mock of IntervalTask interface
type MockIntervalTask struct {
	ctrl     *gomock.Controller
	recorder *MockIntervalTaskMockRecorder
}

// MockIntervalTaskMockRecorder is the mock recorder for MockIntervalTask
type MockIntervalTaskMockRecorder struct {
	mock *MockIntervalTask
}

// NewMockIntervalTask creates a new mock instance
func NewMockIntervalTask(ctrl *gomock.Controller) *MockIntervalTask {
	mock := &MockIntervalTask{ctrl: ctrl}
	mock.recorder = &MockIntervalTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIntervalTask) EXPECT() *MockIntervalTaskMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockIntervalTask) Run() {
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run
func (mr *MockIntervalTaskMockRecorder) Run() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIntervalTask)(nil).Run))
}
