// Copyright (c) 2016-2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/uber/kraken/tracker/peerstore (interfaces: Store)

// Package mockpeerstore is a generated GoMock package.
package mockpeerstore

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/uber/kraken/core"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetPeers mocks base method
func (m *MockStore) GetPeers(arg0 core.InfoHash, arg1 int) ([]*core.PeerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers", arg0, arg1)
	ret0, _ := ret[0].([]*core.PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers
func (mr *MockStoreMockRecorder) GetPeers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockStore)(nil).GetPeers), arg0, arg1)
}

// UpdatePeer mocks base method
func (m *MockStore) UpdatePeer(arg0 core.InfoHash, arg1 *core.PeerInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePeer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePeer indicates an expected call of UpdatePeer
func (mr *MockStoreMockRecorder) UpdatePeer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePeer", reflect.TypeOf((*MockStore)(nil).UpdatePeer), arg0, arg1)
}
