// Code generated by MockGen. DO NOT EDIT.
// Source: code.uber.internal/infra/kraken/tracker/storage (interfaces: Storage)

// Package mockstorage is a generated GoMock package.
package mockstorage

import (
	torlib "code.uber.internal/infra/kraken/torlib"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateManifest mocks base method
func (m *MockStorage) CreateManifest(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "CreateManifest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateManifest indicates an expected call of CreateManifest
func (mr *MockStorageMockRecorder) CreateManifest(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManifest", reflect.TypeOf((*MockStorage)(nil).CreateManifest), arg0, arg1)
}

// CreateTorrent mocks base method
func (m *MockStorage) CreateTorrent(arg0 *torlib.MetaInfo) error {
	ret := m.ctrl.Call(m, "CreateTorrent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTorrent indicates an expected call of CreateTorrent
func (mr *MockStorageMockRecorder) CreateTorrent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTorrent", reflect.TypeOf((*MockStorage)(nil).CreateTorrent), arg0)
}

// DeleteManifest mocks base method
func (m *MockStorage) DeleteManifest(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteManifest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManifest indicates an expected call of DeleteManifest
func (mr *MockStorageMockRecorder) DeleteManifest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManifest", reflect.TypeOf((*MockStorage)(nil).DeleteManifest), arg0)
}

// GetManifest mocks base method
func (m *MockStorage) GetManifest(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "GetManifest", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifest indicates an expected call of GetManifest
func (mr *MockStorageMockRecorder) GetManifest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifest", reflect.TypeOf((*MockStorage)(nil).GetManifest), arg0)
}

// GetPeers mocks base method
func (m *MockStorage) GetPeers(arg0 string) ([]*torlib.PeerInfo, error) {
	ret := m.ctrl.Call(m, "GetPeers", arg0)
	ret0, _ := ret[0].([]*torlib.PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers
func (mr *MockStorageMockRecorder) GetPeers(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockStorage)(nil).GetPeers), arg0)
}

// GetTorrent mocks base method
func (m *MockStorage) GetTorrent(arg0 string) (string, error) {
	ret := m.ctrl.Call(m, "GetTorrent", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTorrent indicates an expected call of GetTorrent
func (mr *MockStorageMockRecorder) GetTorrent(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTorrent", reflect.TypeOf((*MockStorage)(nil).GetTorrent), arg0)
}

// UpdatePeer mocks base method
func (m *MockStorage) UpdatePeer(arg0 *torlib.PeerInfo) error {
	ret := m.ctrl.Call(m, "UpdatePeer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePeer indicates an expected call of UpdatePeer
func (mr *MockStorageMockRecorder) UpdatePeer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePeer", reflect.TypeOf((*MockStorage)(nil).UpdatePeer), arg0)
}
