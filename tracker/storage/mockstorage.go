package storage

// Automatically generated by MockGen.
// Source: storage.go

import (
	"code.uber.internal/infra/kraken/torlib"
	"github.com/golang/mock/gomock"
)

// MockStorage is mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRecorder
}

// NewMockStorage creates a new MockStorage
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageRecorder{mock}
	return mock
}

// MockStorageRecorder is Recorder for MockStorage
type MockStorageRecorder struct {
	mock *MockStorage
}

// EXPECT returns the recorder
func (_m *MockStorage) EXPECT() *MockStorageRecorder {
	return _m.recorder
}

// Name implements storage.Name
func (_m *MockStorage) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name recordes storage.Name
func (_mr *MockStorageRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}

// GetPeers implements storage.GetPeers
func (_m *MockStorage) GetPeers(infohash string) ([]*torlib.PeerInfo, error) {
	ret := _m.ctrl.Call(_m, "GetPeers", infohash)
	ret0, _ := ret[0].([]*torlib.PeerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers recordes storage.GetPeers
func (_mr *MockStorageRecorder) GetPeers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPeers", arg0)
}

// UpdatePeer implements storage.UpdatePeer
func (_m *MockStorage) UpdatePeer(peer *torlib.PeerInfo) error {
	ret := _m.ctrl.Call(_m, "UpdatePeer", peer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePeer recordes storage.UpdatePeer
func (_mr *MockStorageRecorder) UpdatePeer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePeer", arg0)
}

// GetTorrent implements storage.GetTorrent
func (_m *MockStorage) GetTorrent(name string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetTorrent", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTorrent recordes storage.GetTorrent
func (_mr *MockStorageRecorder) GetTorrent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTorrent", arg0)
}

// CreateTorrent implements storage.CreateTorrent
func (_m *MockStorage) CreateTorrent(meta *torlib.MetaInfo) error {
	ret := _m.ctrl.Call(_m, "CreateTorrent", meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTorrent recordes storage.CreateTorrent
func (_mr *MockStorageRecorder) CreateTorrent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateTorrent", arg0)
}

// GetManifest implements storage.GetManifest
func (_m *MockStorage) GetManifest(tag string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetManifest", tag)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifest recordes storage.GetManifest
func (_mr *MockStorageRecorder) GetManifest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetManifest", arg0)
}

// CreateManifest implements storage.CreateManifest
func (_m *MockStorage) CreateManifest(tag string, manifestRaw string) error {
	ret := _m.ctrl.Call(_m, "CreateManifest", tag, manifestRaw)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateManifest recordes storage.CreateManifest
func (_mr *MockStorageRecorder) CreateManifest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateManifest", arg0, arg1)
}

// DeleteManifest implements storage.DeleteManifest
func (_m *MockStorage) DeleteManifest(tag string) error {
	ret := _m.ctrl.Call(_m, "DeleteManifest", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManifest recordes storage.DeleteManifest
func (_mr *MockStorageRecorder) DeleteManifest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteManifest", arg0)
}
